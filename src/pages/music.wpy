<template>
    <view class="container overflow-hidden">
        <p class="music-page-title ignoreText">{{musicInfo[MusIndex].name || '未知名歌曲'}}</p>
        <p class="music-page-author ignoreText">- {{musicInfo[MusIndex].author || '未知名作者'}} -</p>
        <image class="{{playFlag == false ? 'music-page-cover rotate' : 'music-page-cover'}}"  mode="aspectFit" src="{{musicInfo[MusIndex].cover || '../assets/images/music/default.jpg'}}"></image>
        <!-- <audio poster="{{musicInfo.cover}}" name="{{musicInfo.name}}" author="{{musicInfo.author}}" src="{{musicInfo.src}}" id="myAudio"></audio> -->
        <view class=" font-size12 slider-wrap flex-row">
            <view class="waiting-wrap" wx:if="{{networkSlow}}"><span class="waiting font-size14">玩命加载中</span></view> 
            <text class="time-bar flex-colum">{{timer}}</text>
            <slider class="slider-bar" bindchange="goSeek" value="{{currentTime}}" max="{{totalTime}}" color="#CE77D6" block-size="{{blockSize}}" step="1"/>
            <text class="time-bar flex-colum">{{timestamp}}</text>
        </view>
        <view class="controllBar  flex-row">
            <button class="controll-btn" @tap="preSong"  plain hover-class="other-button-hover"><i class="iconfont icon-pre"></i></button>
            <button wx:if="{{playFlag}}" class="controll-btn" plain hover-class="other-button-hover" @tap="play"><i class="iconfont icon-bofang"></i></button>
            <button wx:else class="controll-btn" plain hover-class="other-button-hover" @tap="pause"><i class="iconfont icon-ting"></i></button>
            <button class="controll-btn" @tap="nextSong" plain hover-class="other-button-hover"><i class="iconfont icon-next"></i></button>
        </view>
        <view wx:if="{{openFlag}}" class="play-mask"></view>
        <view class="{{openFlag ? 'play-list-wrap strech' : 'play-list-wrap'}}">
            <ul class="play-list flex-colum">         
                <li wx:for="{{musicInfo}}" @tap="clickListItem({{index}})">{{(index + 1) +'. '+ item.name}} <icon  type="{{index == MusIndex ? 'cancel' : 'info'}}" size="16"/></li>
                <!-- <li>hello world <icon type="info" size="16"/></li>
                <li>hello world <icon type="info" size="16"/></li>
                <li>hello world <icon type="info" size="16"/></li> -->
            
            </ul>
            <view class="search-box flex-colum">
                <button class="search-btn" @tap="searchSwitch" type="primary">搜寻你喜欢的音乐 <icon class="search-icon" size="18" color="#fff" type="search"></icon></button>
            </view>
            <span class='list-btn' @tap="switchList">{{openFlag ? '关闭' : '列表'}}</span>
        </view>
        <view class="{{searchFlag ? 'layout-search flex-colum strech-height' : 'layout-search flex-colum'}}">
            <view class="search-rail borderAndRadius flex-row" >
                <input bindchange="getSearchContent" class="search-input input-within"/>
                <view class="search-btn2" @tap="searchSong">
                     <icon class="search-icon" size="20" color="#aaa" type="search"></icon>
                </view>
            </view>
            <view class="search-list">                                               
                <view class="search-item flex-row" wx:for="{{searchMusicInfo}}">
                    <view class="item-message flex-colum">
                        <span class="song-name ignoreText font-size14">
                            歌名: {{item.Title}}
                        </span>
                        <span class="song-auther ignoreText font-size12">
                            作者：{{item.Author}}
                        </span>
                    </view>
                    <view class="add font-size12" @tap="addSong({{index}})">
                        Add
                    </view>
                </view>       
            </view>
            <view class="back-btn font-size12" @tap="searchSwitch">
                back
            </view>
        </view>
        <toast></toast>
        <bubble></bubble>
        <loading></loading>
    </view>
    
</template>
<style lang="less">
    .item-message {
        width: 80%;
    }
    .back-btn {
        height: 80rpx;
        width: 80rpx;
        border-radius: 50%;
        background:#aaa;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
        line-height: 80rpx;
        color: #fff;
        text-align: center;
        margin-top: 80rpx;
    }
    .add {
        border:1rpx solid #ccc;
        padding: 4rpx;
        height: 40rpx;
        text-align: center;
        line-height: 40rpx;
        border-radius: 6px;
        background: #A31FD1;
        color: #fff;
    }
    .search-list {
       width: 90%;
       height: 65vh;
       overflow: auto;
       border-bottom: 8rpx solid #1749C2;
       box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
       padding-bottom: 20rpx;
       margin-top: 20rpx;
    }
    .search-item {
        height: 100rpx;
        width: 100%;
        justify-content: space-between;
        align-items: center;
        padding: 0 10rpx;
        box-sizing: border-box;
        border-bottom: 4rpx solid #21D63D;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
    }
    .search-btn2 {
         padding: 8rpx 20rpx;
         font-size: 28rpx;
         width: 15%;
         height: 80rpx;
         line-height: 100rpx;
         text-align: center;
         border-left: 1rpx solid #ccc;
    }
    .search-input {
        width: 70%;
        flex-grow: 1;
        
    }
    .search-rail {
        width: 90%;
        margin-top: 30rpx;
    }
    .layout-search {
        position: fixed;
        top:0;
        left:0;
        width: 100%;
        height: 0vh;
        z-index: 10;
        align-items: center;
        overflow: hidden;
        background:rgba(254, 252, 254, .9);
        transition: height .5s ease-in-out;
    }
    .strech-height{
        height: 100vh;
    }
    .search-icon {
        vertical-align: center;
    }
    .waiting-wrap {
        margin-top: 40rpx;
        width: 100%;
        text-align: center;
        position:absolute;
        top:-58rpx;
    }
    .waiting{
        display: inline-block;
        width: 25%;
        text-align: left;
    }
    .waiting:after {
        color: #000;
        content: '';
        animation: wait 1.5s ease-in infinite;
    }
    @keyframes wait {
        0% {
            content: '';
        }
        25% {
            content: '.';
        }
        75% {
            content: '..';
        }
        100% {
            content: '...';
        }
    }
    .music-page-title {
        font-size: 20px;
        font-weight: bold;
        margin-top: 40rpx;
        color:#999;
        width:80%;
        text-align:center;
    }
    .music-page-author {
        font-size: 16px;
        margin-top: 16rpx;
        color:#999;
        width:80%;
        text-align:center;
    }
    .music-page-cover {
        width: 500rpx;
        height: 500rpx;
        border-radius: 50%;
        margin-top: 40rpx;
        border: 20rpx solid #000;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
    }
    .controllBar{
        width: 70%;
        justify-content: space-around;
        margin-top: 20rpx;
        .controll-btn {
            border: none;
            height: 120rpx;
            line-height: 120rpx;

             .iconfont {
                font-size: 100rpx;
                color:#999;
            }
        }

    }
    .other-button-hover .iconfont{
        color:#000;
    }
    @keyframes rotate {
        0% {
            transform: rotate(0);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    .rotate {
        animation: rotate 10s linear infinite;
    }
    .play-list-wrap{
        position: absolute;
        top: 0;
        right: 0;
        width: 80%;
        bottom: 0;
        z-index: 2;
        transform: translateX(100%);
        background: #fff;
        transition: all .3s ease-in-out; 
        border-left: 6px solid #000;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
    }
    .play-list { 
        align-items:center;
        font-size: 16px;
        overflow: auto;
        height: 80vh;
        border-bottom: 6px solid #000;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
        li {
            height: 100rpx;
            line-height: 100rpx;
            text-align: left;
            padding-left: 10rpx;
            background:#EAEAEC ;
            width: 100%;
            box-sizing: border-box;
            color:#626267;
        }
    }
    .play-list :nth-child(even) {
        background: #D6D6DC;
    }
    .play-mask {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: 1;
        background:rgba(0,0,0,.46);
    }
    .list-btn {
         font-size: 14px;
         position: absolute;
         width: 100rpx;
         height: 60rpx;
         line-height: 60rpx;
         text-align: center;
         border-top-left-radius: 6px;
         border-bottom-left-radius: 6px;
         top: 20rpx;
         left: -112rpx;
         color:#CCCED3!important;
         background: #393E37!important;
    }
    .strech {
        transform: translateX(0);
    }
    .slider-wrap {
        position: relative;
        margin-top: 40rpx;
        width: 100%;
        justify-content: space-around;
        .slider-bar{
            width: 60%;
        }
        .time-bar {
            width: 18%;
            justify-content: center;
            align-items: center;
        }
    }
    .search-box {
        align-items: center;
        justify-content: center;
        height: 20vh;
    }
</style>
<script>
import wepy from 'wepy'
import Toast from 'wepy-com-toast'
import Bubble from '@/components/bubble'
import Loading from '@/components/loading'
export default class Music extends wepy.page {
//将js分成几个layout 有助于日后维护

//**********************************基本配置层--顶部**********************************
    config = {
      navigationBarTitleText: 'Music-Player'
    }

    components = {
        toast: Toast,
        bubble: Bubble,
        loading: Loading
    }

    data = {
       musicInfo: [], //从缓存中获取音乐信息,
       audioCtx: null ,
       playFlag: true,
       openFlag: false,
       timer: "00:00",
       timestamp:"00:00",
       currentTime: 0,
       totalTime: 100,
       blockSize: 12,
       MusIndex: 0,
       networkSlow: false,
       searchFlag: false ,
       searchMusicInfo:[], //搜索的音乐信息
       searchContent:''
    }

    watch = {
        MusIndex(newValue, oldValue) {
            this.updateOldAudio(newValue)
            this.$apply()
        }
    }

    methods = {
        play() {
            this.playFlag = false
            this.audioCtx.play()      
        },
        pause() {
            this.playFlag = true
            this.audioCtx.pause()   
        },
        switchList() {
            this.openFlag = !this.openFlag
        },
        searchSwitch() {
            this.searchFlag = !this.searchFlag
        },
        clickListItem(index) {
            //2种情况正在播放或者非正在播放
            if(this.MusIndex == index){
                this.playFlag = true
                this.audioCtx.pause() 
            } else {
                this.MusIndex = index
                this.playFlag = false
                this.audioCtx.play()   
            }
        },
        preSong() {
            if (this.MusIndex != 0){
                this.MusIndex--
            } else {
                this.$invoke('toast', 'show', {
                    title: '已经是最前一首了',
                    img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
                })
            }
        },
        nextSong() {
          if (this.MusIndex != this.musicInfo.length){
                this.MusIndex++
            } else {
                this.$invoke('toast', 'show', {
                    title: '已经是最后一首了',
                    img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
                })
            }
        },
        searchSong() {
            const model = this
            if(!model.searchContent) return
            model.searchMusicInfo = null
            model.$invoke('loading', 'show', '搜索中')
            var content = model.searchContent
             wepy.request({
                url: 'https://weapp.demo2.mixmedia.com/qqmusic/search',
                data: {
                    s: content
                },
                success: function (res) {
                    model.$invoke('loading', 'hide')
                    console.log(res.data)
                    model.searchMusicInfo = res.data
                    model.$apply()
                },
                fail: function (err) {
                    model.$invoke('loading', 'hide')
                    console.log(err)
                }
            })     
        },
        addSong(index) {
             var newSong = this.keyTransverter(['name', 'src', 'cover', 'author'], ['Title', 'Src', 'Cover', 'Author'], this.searchMusicInfo[index])
             this.musicInfo.push(newSong)
             this.$invoke('bubble', 'show', {
                val: '添加成功',
                iconType: 'success'
             })
        }
        
    }
    //**********************************基本配置层--底部**********************************

    //**********************************生命钩子层--顶部**********************************
    onLoad() {
        const model = this
        new Promise(function (resolve) { 
            wepy.getStorage({
                key:'musicInfo',
                success: function (res) { 
                    //验证缓存数据的类型     
                    if (res.data instanceof Array) {
                        model.musicInfo = res.data
                    } else {
                        model.musicInfo[0] = res.data
                    }          
                    model.$apply()
                    resolve()
                }
            })
        })
        .then(function () {
            model.initNewAudio()
        })
   }
   //**********************************生命钩子层--底部**********************************

   //**********************************自定义方法层--顶部**********************************

    /**
     * @param {Array} targetKeys the key you want to assgin value
     * @param {Array} originKeys the array that you want take the key mapping value to other
     * @param {Object} origin the original object
     * @return {Object}  a object be mapped value by params origin and originKeys
     */
    keyTransverter(targetKeys, originKeys,  origin) {
            var target = {}
            for (var i = 0, len = targetKeys.length; i < len; i++) {
                target[targetKeys[i]] = origin[originKeys[i]]
            }
            return target    
    }

    initNewAudio() {
            this.audioCtx = wx.getBackgroundAudioManager()  
            this.baseAudioConfig(0)
            //src赋值后自动播放
            this.playFlag = false 
            this.audioCtx.onTimeUpdate(() => {        
                this.updateProgress()
                this.networkSlow = false
            })
            this.audioCtx.onWaiting(() => {    
                this.networkSlow = true
            })
            this.audioCtx.onEnded(() => {
                if (this.MusIndex == this.musicInfo.length - 1) {
                    this.MusIndex = 0
                } else {
                     this.MusIndex++
                }
                this.$apply()
            })        
    }

    updateOldAudio(index) {
        this.audioCtx.pause()
        this.baseAudioConfig(index)
        this.timer = "00:00"
        this.timestamp = "00:00"
        this.currentTime = 0
        this.totalTime = 100
    }

    baseAudioConfig(index) {
        this.audioCtx.title = this.musicInfo[index].name
        this.audioCtx.coverImgUrl = this.musicInfo[index].cover
        this.audioCtx.singer = this.musicInfo[index].auther
        this.audioCtx.src = this.musicInfo[index].src
    }

    getSearchContent(e) {
        this.searchContent = e.detail.value
    }
    
    goSeek(e) {
        this.audioCtx.seek(e.detail.value)
    }

    formatTime(val) {
        var h = 0,
            m = 0,
            s = 0

        h = Math.floor(val / 3600)
        val = val % 3600
        m = Math.floor(val / 60)
        s = Math.floor(val % 60)
    
        return this.patchTime(h, m, s)

    }

    patchTime(h, m, s) {
        var times = [h, m, s]  
        
        for (var i = 0, len = times.length; i < len; i++) {
            if (i == 0 && times[i] == 0) {
                times.splice(i ,1)
            }

            if (times[i] >= 0 && times[i] < 10) {
                times[i] = '0' + times[i]
            }
        }

        return times.join(':')
    }

    updateProgress() {
        this.currentTime = parseInt(this.audioCtx.currentTime)
        this.timer =  this.formatTime(this.audioCtx.currentTime)
        this.totalTime = parseInt(this.audioCtx.duration)
        this.timestamp =  this.formatTime(this.audioCtx.duration)     
        this.$apply()
    }
    //**********************************自定义方法层--底部**********************************

}
</script>



